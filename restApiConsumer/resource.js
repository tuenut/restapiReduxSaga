import {UrlConstructor} from "./urlConstructor.js";


/**
 * @name requestMethod
 * @function
 *
 * @param {string} type
 * @param {string} url
 * @param {object} [data]
 *
 * @returns {Promise}
 * */


/** Base class for REST API resource.
 * Common REST API methods already implemented there. It can be enough to use.
 *
 * TODO: Check for necessery of usage `.then` for Axios promises in that class.
 *  Sagas generated by factories shoud works and handle with returning result of
 *  that class methods.
 *
 * @class ApiResource
 *
 * @property {URLConstructor} #url - URL constructor object.
 *
 * */
export class ApiResource {
  #url;
  #request;

  /** That class and its inheritors must be instantiated by
   *  `ApiRepository#createResource()` method.
   *
   * @param {requestMethod} requestMethod -
   * @param {string} [url=""] -
   * */
  constructor(requestMethod, url = "") {
    if (!requestMethod) {
      throw new Error("Request method must be provide to resource class.");
    } else {
      this.#request = requestMethod;
    }

    this.#url = new UrlConstructor(url);
  }

  get request() {
    return this.#request;
  }

  get url() {
    return this.#url;
  }

  /**
   * @param {number | string} id - Id of entity.
   * @param {string} [extraAction=""] - Name of extra action for endpoint.
   * @param {object} [options]
   *
   * @returns {AxiosPromise} AxiosPromise without catch statement.
   * */
  retrieve(id, extraAction, options) {
    return this.request("retrieve", this.url.retrieve(id, extraAction, options));
  }

  /**
   * @param {object} [options] - REST API otions.
   * @param {string} [extraAction] -
   *
   * @returns {AxiosPromise} AxiosPromise without catch statement.
   * */
  list(options, extraAction) {
    return this.request("list", this.url.list(options, extraAction));
  }

  /**
   * @param {object} data - Data for create new object.
   *
   * @returns {AxiosPromise} - AxiosPromise without catch statement.
   * */
  create(data) {
    return this.request("create", this.url.create(), data);
  }

  /**
   * @param {number | string} id - Id of entity.
   * @param {object} data - Data for update object.
   *
   * @returns {AxiosPromise} AxiosPromise without catch statement.
   * */
  update(id, data) {
    return this.request("update", this.url.update(id), data);
  }

  /**
   * @param {number | string} id - Id of entity.
   *
   * @returns {AxiosPromise} AxiosPromise without catch statement.
   * */
  delete(id) {
    return this.request("delete", this.url.delete(id));
  }

  /** You can use that for prototyping some code without use real requests to server.
   *
   * @param {object} [fakeData] - that data will be returned from endpoint
   * @param {number} [delay] - optional delay to simulate real dealy between
   *  request and response.
   *
   * @returns {Promise}
   * */
  fakeRequest(
    fakeData = {message: "This is fake data."},
    delay = 500
  ) {
    const fakedResponsePromise = new Promise((resultHandler, reject) => {
      setTimeout(
        (value) => resultHandler({data: {...fakeData}}),
        delay
      );
    });

    return fakedResponsePromise;
  }
}